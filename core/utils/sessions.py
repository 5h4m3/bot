import asyncio
from config import settings, constants
from pyrogram import Client
from pyrogram.errors import (
    PhoneCodeInvalid, PhoneCodeExpired,
    SessionPasswordNeeded, FloodWait
)
import time
import logging
from core.utils import db

user_sessions = {}  # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–π
user_states = {}    # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

async def handle_telegram_code(client, user_id, code):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    if user_id not in user_sessions:
        await client.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")
        return False

    session = user_sessions[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–¥–∞ (5 –º–∏–Ω—É—Ç)
    current_time = time.time()
    if current_time - session.get('code_time', 0) > 300:
        await client.send_message(user_id, "‚åõ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ.")
        try:
            await session['client'].disconnect()
        except:
            pass
        del user_sessions[user_id]
        return False

    # –û—á–∏—Å—Ç–∫–∞ –∫–æ–¥–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    code_clean = ''.join([c for c in str(code) if c.isdigit()])
    if len(code_clean) != 5:
        await client.send_message(user_id, "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 5 —Ü–∏—Ñ—Ä")
        return False
    
    try:
        logging.info(f"üîπ Sign in attempt - Phone: {session['phone']}, Code hash: {session['phone_code_hash']}, Code: {code_clean} (timestamp: {session.get('code_time')}, current: {time.time()})")
        logging.info(f"üîπ Time difference: {time.time() - session.get('code_time', 0)}")
        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not session['client'].is_connected:
            await session['client'].connect()

        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
        try:
            await session['client'].sign_in(
                phone_number=session['phone'],
                phone_code_hash=session['phone_code_hash'],
                phone_code=code_clean
            )
        except SessionPasswordNeeded:
            user_sessions[user_id]['status'] = 'awaiting_password'
            await client.send_message(
                user_id,
                "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_code")]
                ])
            )
            return False

        # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        await save_user_settings(
            user_id,
            is_active=1,
            session_file=session['session_name']
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        await session['client'].stop()

        # –ó–∞–ø—É—Å–∫–∞–µ–º userbot
        user_client = Client(
            session['session_name'],
            api_id=session['client'].api_id,
            api_hash=session['client'].api_hash
        )
        await user_client.start()
        asyncio.create_task(main_loop(user_id, user_client))
        
        await client.send_message(user_id, "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        return True

    except PhoneCodeInvalid:
        await client.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        return False
        
    except PhoneCodeExpired:
        await client.send_message(user_id, "‚åõ –ö–æ–¥ –∏—Å—Ç–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ.")
        try:
            await session['client'].disconnect()
        except:
            pass
        del user_sessions[user_id]
        return False
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", exc_info=True)
        await client.send_message(
            user_id,
            f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="resend_code")],
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return False
        
async def handle_2fa(client, user_id):
    user_sessions[user_id]['status'] = 'awaiting_password'
    await client.send_message(
        user_id,
        "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_code")]
        ])
    )
        
async def revoke_expired_access():
    """–û—Ç–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –∫–ª—é—á–∞–º–∏"""
    conn = sqlite3.connect(settings.DB_FILE)
    cursor = conn.cursor()

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('''SELECT used_by FROM access_keys 
                    WHERE expires_at IS NOT NULL AND expires_at <= ? AND used_by IS NOT NULL''', 
                    (now,))
    
    for user_id in [row[0] for row in cursor.fetchall()]:
        await stop_userbot(user_id)
        cursor.execute('UPDATE access_keys SET used_by=NULL WHERE used_by=?', (user_id,))
        user_states[user_id] = {'state': 'awaiting_access_key'}
        
        try:
            await bot.send_message(
                user_id,
                "‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç–µ–∫!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_access")]])
            )
        except Exception as e:
            logging.error(f"Failed to notify user {user_id}: {e}")

    conn.commit()
    conn.close()
    
async def check_telegram_ban(phone):
    from config.settings import settings
    try:
        temp_client = Client("temp_session", api_id=settings.API_ID, api_hash=settings.API_HASH)
        await temp_client.connect()
        await temp_client.send_code(phone)
        await temp_client.disconnect()
        return False
    except FloodWait as e:
        return e.value
    except Exception:
        return True
    finally:
        if 'temp_client' in locals():
            await temp_client.disconnect()

async def check_authorization(client):
    try:
        me = await client.get_me()
        return me is not None
    except:
        return False
        
async def start_userbot(client, user_id, edit_message_id=None):
    try:
        logging.info(f"üîπ Starting userbot for user_id: {user_id}")
        await asyncio.sleep(1)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è
        if user_id in FLOOD_CONTROL:
            last_request = FLOOD_CONTROL[user_id].get('last_request', 0)
            if time.time() - last_request < 30:
                logging.warning("‚ö†Ô∏è Flood control active, waiting 30 sec")
                await asyncio.sleep(30)

        phone, api_id, api_hash, is_active, _ = await get_user_settings(user_id)
        
        if not all([phone, api_id, api_hash]):
            await client.send_message(user_id, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–º–µ—Ä –∏ API –¥–∞–Ω–Ω—ã–µ")
            return False

        session_name = f'sessions/session_{user_id}'
        user_client = Client(
            session_name,
            api_id=int(api_id),
            api_hash=api_hash,
            phone_number=phone
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if user_id in user_sessions:
            try:
                if hasattr(user_sessions[user_id]['client'], 'is_connected'):
                    if user_sessions[user_id]['client'].is_connected:
                        await user_sessions[user_id]['client'].disconnect()
            except Exception as e:
                logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
        try:
            await user_client.connect()
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            await client.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        try:
            sent_code = await user_client.send_code(phone)
            logging.info(f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}, —Ö—ç—à: {sent_code.phone_code_hash}")
            
            user_sessions[user_id] = {
                'client': user_client,
                'phone_code_hash': sent_code.phone_code_hash,
                'phone': phone,
                'session_name': session_name,
                'code_time': time.time(),
                'status': 'awaiting_telegram_code'
            }

            await client.send_message(
                user_id,
                f"üîë –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}\n–í–≤–µ–¥–∏—Ç–µ 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç):",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∫–æ–¥", callback_data="resend_code")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_code")]
                ])
            )
            return True

        except FloodWait as e:
            wait_time = format_wait_time(e.value)
            await client.send_message(
                user_id,
                f"‚è≥ Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä.\n\n"
                f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ **{wait_time}** –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ", callback_data="main_menu")],
                    [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/btw_idm")]
                ])
            )
            return False

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
            await client.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return False

    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ start_userbot: {e}")
        await client.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        sent_code = await user_client.send_code(phone)
        logging.info(f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}, —Ö—ç—à: {sent_code.phone_code_hash}")
    except FloodWait as e:
        wait_time = format_wait_time(e.value)
        await client.send_message(
            user_id,
            f"‚è≥ Telegram –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {wait_time}.",
        )
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")
        await client.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –Ω–æ–º–µ—Ä
        ban_time = await check_telegram_ban(phone)
        if ban_time:
            if isinstance(ban_time, int):  # –ï—Å–ª–∏ —ç—Ç–æ FloodWait
                wait_time = format_wait_time(ban_time)
                await client.send_message(
                    user_id,
                    f"‚è≥ Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–æ–≤. –ñ–¥–∏—Ç–µ {wait_time}.",
                )
            else:  # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∑–∞–±–∞–Ω–µ–Ω)
                await client.send_message(
                    user_id,
                    "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                )
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        sent_code = await user_client.send_code(phone)
        logging.info(f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ù–æ–º–µ—Ä: {phone}, —Ö—ç—à: {sent_code.phone_code_hash}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {type(e)}: {e}")
    
    except FloodWait as e:
        wait_time = format_wait_time(e.value)
        await client.send_message(
            user_id,
            f"‚è≥ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –ñ–¥–∏—Ç–µ {wait_time}.",
        )
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
        await client.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def stop_userbot(user_id):
    if user_id in user_sessions:
        try:
            if hasattr(user_sessions[user_id]['client'], 'is_connected'):
                if user_sessions[user_id]['client'].is_connected:
                    await user_sessions[user_id]['client'].disconnect()
            await save_user_settings(user_id, is_active=0)
            return True
        except Exception as e:
            logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
            return False
    return True
    
async def handle_telegram_code(client, user_id, code):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        if user_id not in user_sessions:
            await client.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")
            return False

        session = user_sessions.get(user_id)
        if not session:
            await client.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–¥–∞ (5 –º–∏–Ω—É—Ç)
        current_time = time.time()
        code_time = session.get('code_time', 0)
        
        if current_time - code_time > 300:  # 5 –º–∏–Ω—É—Ç
            await client.send_message(user_id, "‚åõ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ.")
            try:
                if 'client' in session:
                    await session['client'].disconnect()
            except:
                pass
            if user_id in user_sessions:
                del user_sessions[user_id]
            return False

        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–¥–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        code_clean = ''.join([c for c in str(code) if c.isdigit()])
        if len(code_clean) != 5:
            await client.send_message(user_id, "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 5 —Ü–∏—Ñ—Ä")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not session.get('client') or not session['client'].is_connected:
            try:
                await session['client'].connect()
            except Exception as e:
                await client.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
                return False

        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
        try:
            await session['client'].sign_in(
                phone_number=session['phone'],
                phone_code_hash=session['phone_code_hash'],
                phone_code=code_clean
            )
        except SessionPasswordNeeded:
            user_sessions[user_id]['status'] = 'awaiting_password'
            await client.send_message(
                user_id,
                "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_code")]
                ])
            )
            return False
        except PhoneCodeInvalid:
            await client.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return False
        except PhoneCodeExpired:
            await client.send_message(user_id, "‚åõ –ö–æ–¥ –∏—Å—Ç–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ.")
            try:
                await session['client'].disconnect()
            except:
                pass
            if user_id in user_sessions:
                del user_sessions[user_id]
            return False

        # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        await save_user_settings(
            user_id,
            is_active=1,
            session_file=session['session_name']
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        try:
            await session['client'].stop()
        except:
            pass

        # –ó–∞–ø—É—Å–∫–∞–µ–º userbot
        try:
            user_client = Client(
                session['session_name'],
                api_id=session['client'].api_id,
                api_hash=session['client'].api_hash
            )
            await user_client.start()
            asyncio.create_task(main_loop(user_id, user_client))
            await client.send_message(user_id, "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
            return True
        except Exception as e:
            await client.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
            return False

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_telegram_code: {str(e)}", exc_info=True)
        await client.send_message(
            user_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
        )
        if user_id in user_sessions:
            try:
                await user_sessions[user_id]['client'].disconnect()
            except:
                pass
            del user_sessions[user_id]
        return False
        
@bot.on_message(filters.private & filters.text)
async def handle_2fa_password(client, message):
    user_id = message.from_user.id
    if user_id in user_sessions and user_sessions[user_id].get('status') == 'awaiting_password':
        password = message.text.strip()
        try:
            await user_sessions[user_id]['client'].check_password(password)
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")