from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from core.bot import bot
from core.utils import menu_utils, sessions

@bot.on_callback_query()
async def handle_callback_actions(client, callback_query):
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if not await is_admin(user_id):
        if not await check_user_access(user_id):
            await callback_query.answer(
                "‚ùå –í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç–µ–∫! –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.",
                show_alert=True
            )
            await revoke_expired_access()  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
            return
    
    if data == "generate_key":
        if await is_admin(user_id):
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîë –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á", callback_data="generate_permanent_key")],
                [InlineKeyboardButton("‚è≥ –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á", callback_data="ask_duration")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ])
            await callback_query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª—é—á–∞:",
                reply_markup=keyboard
            )
    
    elif data == "generate_permanent_key":
        key, error = await generate_access_key(client, user_id)
        if key:
            await callback_query.edit_message_text(
                f"üîë –°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á:\n\n<code>{key}</code>\n\n"
                "–ö–ª—é—á –Ω–µ –∏–º–µ–µ—Ç —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ])
            )
    elif data == "list_keys":
        if await is_admin(user_id):
            conn = sqlite3.connect(DB_FILE)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT key, used_by, created_at, expires_at 
                FROM access_keys 
                ORDER BY created_at DESC 
                LIMIT 10
            ''')
            keys = cursor.fetchall()
            conn.close()
            
            now = datetime.now()
            text = "üóù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–ª—é—á–µ–π:\n\n"
            
            for key in keys:
                key_str, used_by, created_at, expires_at = key
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–∞
                status = "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if used_by else "üÜì –ê–∫—Ç–∏–≤–µ–Ω"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
                created_str = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                expire_info = ""
                if expires_at:
                    # –£–¥–∞–ª—è–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if '.' in expires_at:
                        expires_at = expires_at.split('.')[0]
                    
                    expire_dt = datetime.strptime(expires_at, "%Y-%m-%d %H:%M:%S")
                    expire_str = expire_dt.strftime("%d.%m.%Y %H:%M")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫
                    if expire_dt < now:
                        expire_info = f"‚ùå –ò—Å—Ç–µ–∫ {expire_str}"
                    else:
                        expire_info = f"‚è≥ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {expire_str}"
                else:
                    expire_info = "‚ôæÔ∏è –ë–µ—Å—Å—Ä–æ—á–Ω—ã–π"
                
                text += (
                    f"üîë <code>{key_str}</code>\n"
                    f"üïí –°–æ–∑–¥–∞–Ω: {created_str}\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"‚åõ {expire_info}\n\n"
                )
            
            await callback_query.answer()
            await callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ])
            )
    
    elif data == "ask_duration":
        user_states[user_id] = {
            'state': 'awaiting_key_duration',
            'prev_msg_id': callback_query.message.id
        }
        await callback_query.edit_message_text(
            "‚è≥ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 30m - 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ 2h - 2 —á–∞—Å–∞\n"
            "‚Ä¢ 7d - 7 –¥–Ω–µ–π\n"
            "‚Ä¢ 1M - 1 –º–µ—Å—è—Ü\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")]
            ])
        )
    
    elif data == "admin_menu":
        if await is_admin(user_id):
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞", callback_data="generate_key")],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π", callback_data="list_keys")],
                [InlineKeyboardButton("‚öôÔ∏è –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await callback_query.edit_message_text(
                "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=keyboard
            )
    
    elif data == "list_keys":
        if await is_admin(user_id):
            conn = sqlite3.connect(DB_FILE)
            cursor = conn.cursor()
            cursor.execute('SELECT key, used_by, created_at FROM access_keys ORDER BY created_at DESC LIMIT 10')
            keys = cursor.fetchall()
            conn.close()
            
            text = "üóù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–ª—é—á–µ–π:\n\n"
            for key in keys:
                status = "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if key[1] else "üÜì –ê–∫—Ç–∏–≤–µ–Ω"
                text += f"<code>{key[0]}</code> - {status}\n"
            
            await callback_query.answer()
            await callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ])
            )
    elif data == "cancel_access":
        if user_id in sessions.user_states and sessions.user_states[user_id].get('state') == 'awaiting_access_key':
            del sessions.user_states[user_id]
        await menu_utils.show_main_menu(client, user_id)
            
    message_id = callback_query.message.id
    
    try:
        await callback_query.answer()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback: {e}")

    if data == "main_menu":
        await show_main_menu(client, user_id, message_id)
    
    elif data == "settings":
        await show_settings_menu(client, user_id, message_id)
    
    elif data == "set_phone":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        user_states[user_id] = {
            'state': 'awaiting_phone',
            'prev_msg_id': message_id
        }
        await client.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")]
            ])
        )
    
    elif data == "set_api":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è API –¥–∞–Ω–Ω—ã—Ö
        user_states[user_id] = {
            'state': 'awaiting_api',
            'prev_msg_id': message_id
        }
        await client.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="üîë –í–≤–µ–¥–∏—Ç–µ API ID –∏ API HASH —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456 abcdef123456):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")]
            ])
        )
    
    elif data == "cancel_input":
        if user_id in user_states:
            prev_msg_id = user_states[user_id].get('prev_msg_id')
            del user_states[user_id]
            await show_settings_menu(client, user_id, prev_msg_id)
    
    elif data == "status":
        phone, api_id, api_hash, is_active, _ = await get_user_settings(user_id)
        
        status_text = (
            f"üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"üì± –ù–æ–º–µ—Ä: {phone or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"üîë API ID: {api_id or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"üîë API HASH: {api_hash or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω ‚úÖ' if is_active else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ‚õî'}"
        )
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        
        try:
            msg = await client.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text=status_text,
                reply_markup=keyboard
            )
            await cleanup_menus(client, user_id, msg.id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            msg = await client.send_message(
                user_id,
                text=status_text,
                reply_markup=keyboard
            )
            await cleanup_menus(client, user_id, msg.id)
    
        # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_id not in user_states:
            user_states[user_id] = {}
        user_states[user_id]['last_message_id'] = msg.id
    
    elif data == "toggle_bot":
        _, _, _, is_active, _ = await get_user_settings(user_id)
        if is_active:
            if await stop_userbot(user_id):
                await client.edit_message_text(
                    chat_id=user_id,
                    message_id=message_id,
                    text="üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
            else:
                await client.edit_message_text(
                    chat_id=user_id,
                    message_id=message_id,
                    text="‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
        else:
            if not await start_userbot(client, user_id, message_id):
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ start_userbot
                pass
    
    elif data == "resend_code":
        if user_id in user_sessions:
            last_request = user_sessions[user_id].get('code_request_time', 0)
            if time.time() - last_request < 120:
                await callback_query.answer("‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π", show_alert=True)
                return
    
        await callback_query.answer("‚åõ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥...")
        success = await start_userbot(client, user_id, callback_query.message.id)
        if not success:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ start_userbot
            pass
    
    elif data == "cancel_code":
        if user_id in user_sessions:
            try:
                await user_sessions[user_id]['client'].disconnect()
            except:
                pass
            del user_sessions[user_id]
        await show_main_menu(client, user_id)