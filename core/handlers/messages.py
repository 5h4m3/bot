from pyrogram import filters
from core.bot import bot
from core.utils import (
    menu_utils,
    sessions,
    db,
    flood_control
)
from config import settings

@bot.on_message(filters.private & filters.text)
async def message_handler(client, message):
    user_id = message.from_user.id
    text = message.text.strip()
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ Telegram
        if user_id in user_sessions and user_sessions[user_id].get('status') == 'awaiting_telegram_code':
            await handle_telegram_code(client, user_id, text)
            return
        
        logging.info(f"üì© Received message from {user_id}: {text}")
        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
        if user_id in user_states and user_states[user_id].get('state') == 'awaiting_bot_access_code':
            if await validate_access_key(text, user_id):
                del user_states[user_id]
                await message.reply("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ –º–µ–Ω—é.")
                await show_main_menu(client, user_id)
            else:
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ Telegram
    if user_id in user_sessions and user_sessions[user_id].get('status') == 'awaiting_telegram_code':
        await handle_telegram_code(client, user_id, text)
        return
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞
    if user_id in user_states and user_states[user_id].get('state') == 'awaiting_access_key':
        key = message.text.strip()
        if await validate_access_key(key, user_id):
            del user_states[user_id]
            phone, api_id, api_hash, _, _ = await get_user_settings(user_id)

            if phone and api_id and api_hash:
                await message.reply("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
                await start_userbot(client, user_id)
            else:
                await message.reply(
                    "‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üì± –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä", callback_data="set_phone")]
                    ])
                )
        else:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_access")]
                ])
            )
        return
    
    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not await is_admin(user_id) and not await check_user_access(user_id):
        await message.reply(
            "‚ùå –í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç–µ–∫!\n\n"
            "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_access")]
            ])
        )
        user_states[user_id] = {'state': 'awaiting_access_key'}
        return
        
    if not await is_admin(user_id):
        if not await check_user_access(user_id):
            await message.reply(
                "‚ùå –í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç–µ–∫! –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.\n\n"
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            await revoke_expired_access()  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_states:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await show_main_menu(client, user_id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
    if user_states[user_id].get('state') == 'awaiting_key_duration':
        duration = message.text.strip()
        prev_msg_id = user_states[user_id].get('prev_msg_id')
        
        key, error = await generate_access_key(client, user_id, duration)
        if error:
            await message.reply(f"‚ùå {error}")
            return
        
        del user_states[user_id]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute('SELECT expires_at FROM access_keys WHERE key=?', (key,))
        result = cursor.fetchone()
        conn.close()  # –í–∞–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if result and result[0]:
            expires_at = result[0]
            # –£–¥–∞–ª—è–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if '.' in expires_at:
                expires_at = expires_at.split('.')[0]
            try:
                expires_str = datetime.strptime(expires_at, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
                duration_info = f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {expires_str}"
            except ValueError:
                duration_info = f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_at}"
        else:
            duration_info = "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á (–±–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è)"
        
        await client.send_message(
            user_id,
            f"üîë –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á:\n\n<code>{key}</code>\n\n{duration_info}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ])
        )
        
        try:
            await client.delete_messages(user_id, message.id)
            if prev_msg_id:
                await client.delete_messages(user_id, prev_msg_id)
        except:
            pass
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_states[user_id].get('state') == 'awaiting_access_key':
        key = message.text.strip()
        if await validate_access_key(key, user_id):
            del user_states[user_id]
            phone, api_id, api_hash, _, _ = await get_user_settings(user_id)

            if phone and api_id and api_hash:
                # –í—Å—ë –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º userbot
                await message.reply("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
                await start_userbot(client, user_id)
            else:
                # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
                await message.reply(
                    "‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üì± –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä", callback_data="set_phone")]
                    ])
                )
        else:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_access")]
                ])
            )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    state = user_states[user_id].get('state')
    prev_msg_id = user_states[user_id].get('prev_msg_id')
    
    try:
        if state == 'awaiting_phone':
            phone = message.text.strip()
            if phone.startswith('+') and len(phone) > 5:
                await save_user_settings(user_id, phone=phone)
                await message.delete()
                await client.send_message(user_id, f"‚úÖ –ù–æ–º–µ—Ä {phone} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                await show_settings_menu(client, user_id, prev_msg_id)
            else:
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        elif state == 'awaiting_api':
            try:
                parts = message.text.split()
                if len(parts) == 2:
                    api_id, api_hash = parts
                    api_id = int(api_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API ID - —á–∏—Å–ª–æ
                    await save_user_settings(user_id, api_id=api_id, api_hash=api_hash)
                    await message.delete()
                    await client.send_message(user_id, "‚úÖ API –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    await show_settings_menu(client, user_id, prev_msg_id)
                else:
                    raise ValueError()
            except ValueError:
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ API ID (—á–∏—Å–ª–æ) –∏ API HASH —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
            except Exception as e:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if user_id in user_states:
            del user_states[user_id]
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
    await show_main_menu(client, user_id)