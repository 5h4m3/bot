import asyncio
import logging
from core.utils import sessions

async def main_loop(user_id, client):
    from config import constants
    from core.utils import db
    
    logging.info(f"‚ñ∂Ô∏è Starting main loop for user_id: {user_id}")
    await asyncio.sleep(2)  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if not await check_user_access(user_id):
        await stop_userbot(user_id)
        await save_user_settings(user_id, is_active=0)
        try:
            await bot.send_message(
                user_id,
                "‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç–µ–∫!\n\n"
                "‚ùå –ë–æ—Ç –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã "
                "–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
        except:
            pass
        return
    
    messages = [
        ("—è", 10), ("–±–∏–∑–Ω–µ—Å", 10), ("—Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏", 5), ("—Å–∫–ª–∞–¥", 5),
        ("–∑–∞–∫–∞–∑–∞—Ç—å —Å—ã—Ä—å—ë", 5), ("–∑–∞–∫—É–ø–∏—Ç—å –Ω–∞ –≤—Å–µ –¥–µ–Ω—å–≥–∏", 5),
        ("–¥–∞", 5), ("—è", 5)
    ]
    
    special_messages = [
        ("—è", 10), ("—Å–µ–º—å–∏", 15), ("üî´ –≤–æ–π–Ω–∞ –∑–∞ –ø—Ä–∏—Ç–æ–Ω", 0)
    ]
    
    while True:
        try:
            _, _, _, is_active, _ = await get_user_settings(user_id)
            if not is_active:
                break
                
            now = get_current_time()
            if now.hour == 19 and now.minute == 1:
                for msg, delay in special_messages:
                    await client.send_message(TARGET_CHAT, msg)
                    if delay > 0:
                        await asyncio.sleep(delay)
                
            for msg, delay in messages:
                _, _, _, is_active, _ = await get_user_settings(user_id)
                if not is_active:
                    break
                
                try:
                    await client.send_message(TARGET_CHAT, msg)
                    await asyncio.sleep(delay)
                except Exception:
                    await asyncio.sleep(5)
            
            
            
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if not await check_user_active(user_id):
                break
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if is_special_time():
                await process_special_messages(client)
                await asyncio.sleep(6 * 3600)
                continue
                
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–æ–æ–±—â–µ–Ω–∏–π
            await process_regular_messages(client)
            
        except asyncio.CancelledError:
            break
        except Exception:
            await asyncio.sleep(60)
            
async def check_expired_codes():
    while True:
        logging.debug("üîπ Checking expired codes...")
        await asyncio.sleep(60)
        
        now = time.time()
        for user_id, session in list(sessions.user_sessions.items()):
            if session.get('status') == 'awaiting_telegram_code':
                time_diff = now - session.get('code_time', 0)
                logging.debug(f"‚è≥ User {user_id} code age: {time_diff} sec")
                
                if time_diff > 240:
                    logging.warning(f"‚ö†Ô∏è Code expiring soon for {user_id}")
                    await sessions.bot.send_message(
                        user_id,
                        "‚ö†Ô∏è –ö–æ–¥ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π."
                    )

async def periodic_access_check():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–∑—ã–≤ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–æ—Å—Ç—É–ø–æ–≤"""
    while True:
        try:
            await sessions.revoke_expired_access()
            await asyncio.sleep(3600)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞: {e}")
            await asyncio.sleep(600)